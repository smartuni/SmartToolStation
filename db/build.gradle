buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    baseName = 'gs-accessing-data-mysql'
    version =  '0.1.0'
}


targetCompatibility = 1.8

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile ('org.springframework.boot:spring-boot-starter-data-jpa')
    compile ('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

def webappDir = "$projectDir/src/main/webapp"
sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task installAngular(type:Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
//	outputs.dir "$webappDir/dist"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}
